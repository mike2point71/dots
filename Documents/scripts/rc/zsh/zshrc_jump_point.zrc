# NO SHEBANG BECAUSE THIS WILL BE SOURCED
# vim: set ft=zsh:ts=2:et:

# source /opt/homebrew/bin/env_parallel.zsh

#loud=$1
loud='loud'
export NANO_DATE_FORMAT="+%s.%N"
big_start_time=$(gdate $NANO_DATE_FORMAT)

export MK_SCRIPTS="$DOCSFLDR/scripts"
export RC_FOLDER="$MK_SCRIPTS"/rc
export LOCAL_RC_FOLDER="$RC_FOLDER"/local
export MODS_FOLDER="$RC_FOLDER"/modules
export ZSHRC_FOLDER="$RC_FOLDER"/zsh

source "$LOCAL_RC_FOLDER/path.zrc"

if 2>/dev/null which brew; then
  export BREWPREFIX=$(brew --prefix)
fi

# echo $PATH

function yellowMesasge(){
  printf '\033[93;1m%s\033[0m' "$1"
}

function source_timed () {
  local file_or_dir2="$1"
  if [ "$loud" = 'loud' ]; then
    local start_time
    start_time=$(gdate $NANO_DATE_FORMAT)
    printf 'Sourcing:  %s' "${file_or_dir2#${ZSHRC_FOLDER}/}"
  fi
  source "$file_or_dir2"
  if [ "$loud" = 'loud' ]; then
    local end_time
    end_time=$(gdate $NANO_DATE_FORMAT)
    local elapsed=$((end_time - start_time))
    local elapsed_string="${elapsed:0:4}"
    typeset -i compare_elapsed
    compare_elapsed=$(echo "$elapsed_string > 0.1" | bc)
    if [ $compare_elapsed -eq 1 ] ; then
      yellowMesasge "...took ${elapsed_string} seconds" 
    fi
    printf '\n'
  fi
}


function source_R () {
  local current_path="$1"
  # local line
  # -l     use a long listing format
  # -F, --classify[=WHEN]
  #       append indicator (one of */=>@|) to entries; WHEN can be 'always' (default if omitted), 'auto', or 'never
  # -X Sort by file extension
  # -r, --reverse  reverse order while sorting
  # F to match on.  -X & --reverse so that stuff in root gets executed before others.
  # If something needs to go after something else, just put the one for after into a folder peer to the before-guy
  # gls -1F --reverse --group-directories-first "$current_path" | while IFS= read -r line; do
  # gls -1FXr "$current_path" | while IFS= read -r line; do
  for line in $(gls -1FXr "$current_path"); do

    local file_or_dir="${current_path}/${line%?}"
    case "${line[-1]}" in
      '*')
        source_timed "$file_or_dir"
      ;;
      '/')
        source_R "$file_or_dir"
      ;;
    esac
  done
}



source_timed "$ZSHRC_FOLDER"/source_specifically/do_before_compdefs.rc

# [ -d "$LOCAL_RC_FOLDER" ] && source_R "$LOCAL_RC_FOLDER"

source_R "$ZSHRC_FOLDER"/source_files_then_directories

z_plugins=(clipboard auto-ls pip redis-cli)

for z_plugin in $z_plugins; do
  findInDir="$MODS_FOLDER"/"$z_plugin"
  [ -d "$findInDir" ] || findInDir="$MODS_FOLDER/ohmyzsh/plugins/$z_plugin"
  { [ -d "$findInDir" ] && source_timed "$findInDir"/"$z_plugin".plugin.zsh; } || yellowMesasge "Cannot find $z_plugin"
done

source_timed "$ZSHRC_FOLDER"/source_specifically/do_last.rc


big_end_time=$(gdate $NANO_DATE_FORMAT)
big_elapsed=$((big_end_time - big_start_time))

yellowMesasge "...took ${big_elapsed} seconds" 


# The next line updates PATH for the Google Cloud SDK.
# [ -r '/Users/m/b/google-cloud-sdk/path.zsh.inc' ] && source '/Users/m/b/google-cloud-sdk/path.zsh.inc'

# The next line enables shell command completion for gcloud.
# [ -r '/Users/m/b/google-cloud-sdk/completion.zsh.inc' ] && source '/Users/m/b/google-cloud-sdk/completion.zsh.inc'

# [ -r /Users/m/.iterm2_shell_integration.zsh ] && source /Users/m/.iterm2_shell_integration.zsh || true