# NO SHEBANG BECAUSE THIS WILL BE SOURCED
# vim: set ft=zsh:ts=2:et:

# source /opt/homebrew/bin/env_parallel.zsh

#loud=$1
loud='loud'

export MK_SCRIPTS="$DOCSFLDR/scripts"
export ZSHRC_FOLDER="$MK_SCRIPTS"/rc/zsh
export NANO_DATE_FORMAT="+%s.%N"

path_array=(
  "$MK_SCRIPTS"/util
  "$MK_SCRIPTS"/learning
  "$DOCSFLDR"/bin
  /opt/homebrew/opt/texinfo/bin
  /Users/m/.cargo/bin
  /Users/m/.sdkman/candidates/gradle/current/bin/
  /opt/homebrew/opt/ruby/bin
  /opt/homebrew/opt/python@3.9/Frameworks/Python.framework/Versions/3.9/bin
  /opt/homebrew/opt/tcl-tk/bin
  "$PATH"
)

export PATH=${(j.:.)path_array}

export BREWPREFIX=$(brew --prefix)


# echo $PATH


function source_timed () {
  local file_or_dir2="$1"
  if [ "$loud" = 'loud' ]; then
    local start_time=$(gdate $NANO_DATE_FORMAT)
    printf 'Sourcing:  %s' "${file_or_dir2#${ZSHRC_FOLDER}/}"
  fi
  source "$file_or_dir2"
  if [ "$loud" = 'loud' ]; then
    local end_time=$(gdate $NANO_DATE_FORMAT)
    local elapsed=$((end_time - start_time))
    local elapsed_string="${elapsed:0:4}"
    if [ $(echo "$elapsed_string > 0.1" | bc) -eq 1 ] ; then
      print "\033[93;1m...took ${elapsed_string} seconds\033[0m" 
    fi
    printf '\n'
  fi
}


function source_R () {
  local current_path="$1"
  # local line
  # -l     use a long listing format
  # -F, --classify[=WHEN]
  #       append indicator (one of */=>@|) to entries; WHEN can be 'always' (default if omitted), 'auto', or 'never
  # -X Sort by file extension
  # -r, --reverse  reverse order while sorting
  # F to match on.  -X & --reverse so that stuff in root gets executed before others.
  # If something needs to go after something else, just put the one for after into a folder peer to the before-guy
  # gls -1F --reverse --group-directories-first "$current_path" | while IFS= read -r line; do
  # gls -1FXr "$current_path" | while IFS= read -r line; do
  for line in $(gls -1FXr "$current_path"); do

    local file_or_dir="${current_path}/${line%?}"
    case "${line[-1]}" in
      '*')
        source_timed "$file_or_dir"
      ;;
      '/')
        source_R "$file_or_dir"
      ;;
    esac
  done
}

add2fpath=(
  /opt/homebrew/share/zsh-completions
  /opt/homebrew/completions/zsh/_zsh
  /opt/homebrew/share/zsh/site-functions
  $FPATH
)

export FPATH=${(j.:.)add2fpath}

source_timed "$ZSHRC_FOLDER"/source_specifically/do_before_compdefs.rc

source_R "$ZSHRC_FOLDER"/source_files_then_directories

source_timed "$ZSHRC_FOLDER"/source_specifically/do_last.rc




# The next line updates PATH for the Google Cloud SDK.
# [ -r '/Users/m/b/google-cloud-sdk/path.zsh.inc' ] && source '/Users/m/b/google-cloud-sdk/path.zsh.inc'

# The next line enables shell command completion for gcloud.
# [ -r '/Users/m/b/google-cloud-sdk/completion.zsh.inc' ] && source '/Users/m/b/google-cloud-sdk/completion.zsh.inc'

# [ -r /Users/m/.iterm2_shell_integration.zsh ] && source /Users/m/.iterm2_shell_integration.zsh || true